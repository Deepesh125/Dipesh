/* Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.engedu.anagrams;

import android.content.Intent;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Random;

public class AnagramDictionary {

    private static final int MIN_NUM_ANAGRAMS = 5;
    private static final int DEFAULT_WORD_LENGTH = 3;
    private static final int MAX_WORD_LENGTH = 7;
    private Random random = new Random();
    private ArrayList<String> wordList = new ArrayList<>();
    private HashSet<String> hashSet = new HashSet<>();
    private HashMap<String,ArrayList<String>> latterToWord = new HashMap<>();
    private HashMap<Integer,ArrayList<String>> sizeToWord = new HashMap<>();

    public AnagramDictionary(Reader reader) throws IOException {
        BufferedReader in = new BufferedReader(reader);
        String line;
        while((line = in.readLine()) != null) {
            String word = line.trim();
            wordList.add(word);
            hashSet.add(word);
            ArrayList<String> temp;
            String SortedStr = AlphabaticalOrder(word);
            if(latterToWord.containsKey(SortedStr)){
                temp = latterToWord.get(SortedStr);
                temp.add(word);
            }
            else{
                latterToWord.put(SortedStr,new ArrayList<String>());
                temp = latterToWord.get(SortedStr);
                temp.add(word);
            }
            int len = word.length();
            if (sizeToWord.containsKey(len)) {
                sizeToWord.get(len).add(word);
            }
            else{
                sizeToWord.put(len,new ArrayList<String>());
                sizeToWord.get(len).add(word);
            }
        }
    }

    public boolean isGoodWord(String word, String base) {
        if(hashSet.contains(word) && !word.contains(base))
            return true;
        else
            return false;
    }

    public String AlphabaticalOrder(String word){
        char toArr[] = word.toCharArray();
        Arrays.sort(toArr);
        String returnStr = new String(toArr);
        return returnStr;
    }

    public List<String> getAnagrams(String targetWord) {
        ArrayList<String> result = new ArrayList<String>();
        return result;
    }

    public List<String> getAnagramsWithOneMoreLetter(String word) {
        ArrayList<String> result = new ArrayList<String>();
        for (char ch='a';ch<='z';ch++){
            String temp  = word + ch;
            temp = AlphabaticalOrder(temp);
            if (latterToWord.containsKey(temp)){
                for (String str: latterToWord.get(temp)){
                    if (isGoodWord(str,word))
                        result.add(str);
                }
            }
        }
        return result;
    }

    public String pickGoodStarterWord() {
        while (true) {
            int randNum = random.nextInt(MAX_WORD_LENGTH - DEFAULT_WORD_LENGTH) + DEFAULT_WORD_LENGTH;
            ArrayList<String> wordsOfSize = sizeToWord.get(randNum);
            int len = wordsOfSize.size();
            randNum = random.nextInt(len);
            if (latterToWord.get(AlphabaticalOrder(wordsOfSize.get(randNum))).size() >= MIN_NUM_ANAGRAMS) {
                return wordsOfSize.get(randNum);
            }

        }
    }
}
